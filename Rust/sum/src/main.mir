// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sum(_1: i32, _2: i32) -> i32 {
    debug a => _1;                       // in scope 0 at main.rs:10:8: 10:9
    debug b => _2;                       // in scope 0 at main.rs:10:16: 10:17
    let mut _0: i32;                     // return place in scope 0 at main.rs:10:27: 10:30
    let mut _3: i32;                     // in scope 0 at main.rs:11:5: 11:6
    let mut _4: i32;                     // in scope 0 at main.rs:11:9: 11:10
    let mut _5: (i32, bool);             // in scope 0 at main.rs:11:5: 11:10

    bb0: {
        _3 = _1;                         // scope 0 at main.rs:11:5: 11:6
        _4 = _2;                         // scope 0 at main.rs:11:9: 11:10
        _5 = CheckedAdd(_3, _4);         // scope 0 at main.rs:11:5: 11:10
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at main.rs:11:5: 11:10
    }

    bb1: {
        _0 = move (_5.0: i32);           // scope 0 at main.rs:11:5: 11:10
        return;                          // scope 0 at main.rs:12:2: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at main.rs:1:11: 1:11
    let _1: i32;                         // in scope 0 at main.rs:2:9: 2:10
    let mut _4: i32;                     // in scope 0 at main.rs:5:20: 5:21
    let mut _5: i32;                     // in scope 0 at main.rs:5:23: 5:24
    let _6: ();                          // in scope 0 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:9: 97:62
    let mut _7: std::fmt::Arguments;     // in scope 0 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
    let mut _8: &[&str];                 // in scope 0 at main.rs:7:14: 7:34
    let mut _9: &[&str; 2];              // in scope 0 at main.rs:7:14: 7:34
    let _10: &[&str; 2];                 // in scope 0 at main.rs:7:14: 7:34
    let mut _11: &[std::fmt::ArgumentV1]; // in scope 0 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
    let mut _12: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
    let _13: &[std::fmt::ArgumentV1; 1]; // in scope 0 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
    let _14: [std::fmt::ArgumentV1; 1];  // in scope 0 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
    let mut _15: (&i32,);                // in scope 0 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
    let mut _16: &i32;                   // in scope 0 at main.rs:7:36: 7:40
    let mut _18: std::fmt::ArgumentV1;   // in scope 0 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
    let mut _19: &i32;                   // in scope 0 at main.rs:7:36: 7:40
    let mut _20: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at main.rs:7:36: 7:40
    scope 1 {
        debug a => _1;                   // in scope 1 at main.rs:2:9: 2:10
        let _2: i32;                     // in scope 1 at main.rs:3:9: 3:10
        scope 2 {
            debug b => _2;               // in scope 2 at main.rs:3:9: 3:10
            let _3: i32;                 // in scope 2 at main.rs:5:9: 5:13
            scope 3 {
                debug suma => _3;        // in scope 3 at main.rs:5:9: 5:13
                let _17: &i32;           // in scope 3 at main.rs:7:36: 7:40
                let mut _21: &[&str; 2]; // in scope 3 at main.rs:7:14: 7:34
                scope 4 {
                    debug arg0 => _17;   // in scope 4 at main.rs:7:36: 7:40
                }
            }
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at main.rs:2:13: 2:14
        _2 = const -5_i32;               // scope 1 at main.rs:3:13: 3:15
        _4 = const 1_i32;                // scope 2 at main.rs:5:20: 5:21
        _5 = const -5_i32;               // scope 2 at main.rs:5:23: 5:24
        _3 = sum(move _4, move _5) -> bb1; // scope 2 at main.rs:5:16: 5:25
                                         // mir::Constant
                                         // + span: main.rs:5:16: 5:19
                                         // + literal: Const { ty: fn(i32, i32) -> i32 {sum}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        _21 = const main::promoted[0];   // scope 3 at main.rs:7:14: 7:34
                                         // ty::Const
                                         // + ty: &[&str; 2]
                                         // + val: Unevaluated(main, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: main.rs:7:14: 7:34
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ main[317d]::main), const_param_did: None }, substs: [], promoted: Some(promoted[0]) }) }
        _10 = _21;                       // scope 3 at main.rs:7:14: 7:34
        _9 = _10;                        // scope 3 at main.rs:7:14: 7:34
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 3 at main.rs:7:14: 7:34
        _16 = &_3;                       // scope 3 at main.rs:7:36: 7:40
        (_15.0: &i32) = move _16;        // scope 3 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
        _17 = (_15.0: &i32);             // scope 3 at main.rs:7:36: 7:40
        _19 = _17;                       // scope 4 at main.rs:7:36: 7:40
        _20 = <i32 as std::fmt::Display>::fmt as for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 4 at main.rs:7:36: 7:40
                                         // mir::Constant
                                         // + span: main.rs:7:36: 7:40
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<i32 as std::fmt::Display>::fmt}, val: Value(Scalar(<ZST>)) }
        _18 = ArgumentV1::new::<i32>(move _19, move _20) -> bb2; // scope 4 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32, for<'r, 's, 't0> fn(&'r i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> std::fmt::ArgumentV1<'b> {std::fmt::ArgumentV1::new::<i32>}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        _14 = [move _18];                // scope 4 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
        _13 = &_14;                      // scope 3 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
        _12 = _13;                       // scope 3 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
        _11 = move _12 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 3 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
        _7 = Arguments::new_v1(move _8, move _11) -> bb3; // scope 3 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
                                         // mir::Constant
                                         // + span: /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:28: 97:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[std::fmt::ArgumentV1]) -> std::fmt::Arguments {std::fmt::Arguments::new_v1}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        _6 = _print(move _7) -> bb4;     // scope 3 at /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:9: 97:62
                                         // mir::Constant
                                         // + span: /rustc/42816d61ead7e46d462df997958ccfd514f8c21c/library/std/src/macros.rs:97:9: 97:27
                                         // + literal: Const { ty: for<'r> fn(std::fmt::Arguments<'r>) {std::io::_print}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        _0 = const ();                   // scope 0 at main.rs:1:11: 8:2
        return;                          // scope 0 at main.rs:8:2: 8:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at main.rs:7:14: 7:34
    let mut _1: [&str; 2];               // in scope 0 at main.rs:7:14: 7:34

    bb0: {
        _1 = [const "El resultado es ", const "\n"]; // scope 0 at main.rs:7:14: 7:34
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [69, 108, 32, 114, 101, 115, 117, 108, 116, 97, 100, 111, 32, 101, 115, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 16 })
                                         // mir::Constant
                                         // + span: main.rs:7:14: 7:34
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69, 108, 32, 114, 101, 115, 117, 108, 116, 97, 100, 111, 32, 101, 115, 32], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [65535], len: Size { raw: 16 } }, size: Size { raw: 16 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 16 }) }
                                         // ty::Const
                                         // + ty: &str
                                         // + val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 })
                                         // mir::Constant
                                         // + span: main.rs:7:14: 7:34
                                         // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [10], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, size: Size { raw: 1 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }
        _0 = &_1;                        // scope 0 at main.rs:7:14: 7:34
        return;                          // scope 0 at main.rs:7:14: 7:34
    }
}
